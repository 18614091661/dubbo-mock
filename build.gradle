buildscript {
    ext {
        springBootVersion = '1.4.3.RELEASE'
        spring_version = "4.2.7.RELEASE"
        jackson_version = "2.6.5"
        zkclient_version = "0.1"
    }
    repositories {
        mavenLocal()
        maven { url "http://115.159.125.225:8081/nexus/content/groups/public" }
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
                "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1",
                "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0",
                "gradle.plugin.com.boxfuse.client:flyway-release:4.0.3",
                "com.h2database:h2:1.4.191"
        )
    }
}

group = 'dobbo-mock'
version = '1.0'
description = "畅移java boot框架"

allprojects {
    // 添加全部工程配置在这里
    apply plugin: 'java'

    sourceCompatibility = 1.8

    [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

    repositories {
        mavenLocal()
        maven { url "http://115.159.125.225:8081/nexus/content/groups/public" }
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release" }
    }
}

subprojects {
    apply from: "$rootDir/gradle/coverage.gradle"
    apply from: "$rootDir/gradle/flyway.gradle"
    apply from: "$rootDir/gradle/sonar.gradle"
}

/////////////////  共有方法定义   //////////////////////
/**
 * 加载db配置文件
 * @return
 */
def loadProperties(propFileList) {
    Properties p = new Properties()
    propFileList.each { String file ->
        def temp = new Properties()
        new File(file).withInputStream { stream ->
            temp.load(stream)
            temp.propertyNames().each { String K ->
                p.setProperty(K, temp.getProperty(K));
            }
        }
    }


    return p
}
